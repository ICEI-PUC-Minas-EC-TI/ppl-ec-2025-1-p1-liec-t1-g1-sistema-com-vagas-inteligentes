#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <BluetoothSerial.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);
BluetoothSerial SerialBT;

const int led1 = 13, trig1 = 26, echo1 = 25;
const int led2 = 12, trig2 = 33, echo2 = 32;
const int led3 = 14, trig3 = 18, echo3 = 34;
const int led4 = 27, trig4 = 23, echo4 = 22;

const float distanciaLimite = 10.0;

bool vagasReservadas[4] = {false, false, false, false};
bool reservasOcupadas[4] = {false, false, false, false}; // NOVO: controla se a vaga reservada foi ocupada
uint8_t estados[4] = {0, 0, 0, 0}; // 0 = livre, 1 = ocupada

float medirDistancia(int trig, int echo) {
  digitalWrite(trig, LOW); delayMicroseconds(2);
  digitalWrite(trig, HIGH); delayMicroseconds(10);
  digitalWrite(trig, LOW);
  long duracao = pulseIn(echo, HIGH, 30000);
  if (duracao == 0) return -1.0;
  return duracao * 0.034 / 2.0;
}

void setup() {
  Serial.begin(115200);
  SerialBT.begin("PARKSYNC");

  Wire.begin(21, 5);
  lcd.init(); lcd.backlight();

  pinMode(led1, OUTPUT); pinMode(trig1, OUTPUT); pinMode(echo1, INPUT);
  pinMode(led2, OUTPUT); pinMode(trig2, OUTPUT); pinMode(echo2, INPUT);
  pinMode(led3, OUTPUT); pinMode(trig3, OUTPUT); pinMode(echo3, INPUT);
  pinMode(led4, OUTPUT); pinMode(trig4, OUTPUT); pinMode(echo4, INPUT);

  Serial.println("Bluetooth iniciado");
}

void loop() {
  float distancias[4];

  // Medição de distâncias
  distancias[0] = medirDistancia(trig1, echo1);
  distancias[1] = medirDistancia(trig2, echo2);
  distancias[2] = medirDistancia(trig3, echo3);
  distancias[3] = medirDistancia(trig4, echo4);

  for (int i = 0; i < 4; i++) {
    bool sensorDetectou = distancias[i] > 0 && distancias[i] < distanciaLimite;

    // Atualiza estado da vaga
    if (sensorDetectou || vagasReservadas[i]) {
      estados[i] = 1;
    } else {
      estados[i] = 0;
    }

    // NOVO: Se havia reserva e agora o sensor detectou ocupação, marca que a reserva foi ocupada
    if (vagasReservadas[i] && sensorDetectou) {
      reservasOcupadas[i] = true;
      vagasReservadas[i] = false; // Libera a reserva após ser ocupada
    }

    // NOVO: Se uma vaga com reserva ocupada foi desocupada, limpa o registro da ocupação da reserva
    if (reservasOcupadas[i] && !sensorDetectou) {
      reservasOcupadas[i] = false;
    }

    // Controla LEDs
    switch (i) {
      case 0: digitalWrite(led1, estados[i]); break;
      case 1: digitalWrite(led2, estados[i]); break;
      case 2: digitalWrite(led3, estados[i]); break;
      case 3: digitalWrite(led4, estados[i]); break;
    }
  }

  // Comunicação Bluetooth
  if (SerialBT.available()) {
    uint8_t vaga = SerialBT.read(); // número da vaga (1 a 4)

    if (vaga >= 1 && vaga <= 4) {
      vagasReservadas[vaga - 1] = true;

      uint8_t resposta[2] = {vaga, estados[vaga - 1]};
      SerialBT.write(resposta, 2);
    }
  }

  // Atualiza o LCD
  int livres = 0, ocupadas = 0;
  for (int i = 0; i < 4; i++) {
    if (estados[i] == 1) ocupadas++;
    else livres++;
  }

  lcd.clear();
  lcd.setCursor(0, 0); lcd.print("Livres: "); lcd.print(livres);
  lcd.setCursor(0, 1); lcd.print("Ocupadas: "); lcd.print(ocupadas);

  delay(2000);
}
