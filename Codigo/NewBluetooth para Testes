#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

const int led1 = 13;
const int led2 = 12;
const int led3 = 14;
const int led4 = 27;

const int trig1 = 26;
const int trig2 = 33;
const int trig3 = 18;
const int trig4 = 23;

const int echo1 = 25;
const int echo2 = 32;
const int echo3 = 34;
const int echo4 = 22;

const float distanciaLimite = 50.0;

#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "d0ff3949-1e9e-4155-b70f-54b8a3731e26"

BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
      Serial.println("Dispositivo conectado via BLE");
    };

    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
      Serial.println("Dispositivo desconectado");
    }
};

void setup() {
  Serial.begin(115200);

  Wire.begin(21, 5);
  lcd.init();
  lcd.backlight();

  pinMode(led1, OUTPUT); digitalWrite(led1, LOW);
  pinMode(trig1, OUTPUT); pinMode(echo1, INPUT);

  pinMode(led2, OUTPUT); digitalWrite(led2, LOW);
  pinMode(trig2, OUTPUT); pinMode(echo2, INPUT);

  pinMode(led3, OUTPUT); digitalWrite(led3, LOW);
  pinMode(trig3, OUTPUT); pinMode(echo3, INPUT);

  pinMode(led4, OUTPUT); digitalWrite(led4, LOW);
  pinMode(trig4, OUTPUT); pinMode(echo4, INPUT);

  BLEDevice::init("ESP32_Vagas");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  BLEService *pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ   |
                      BLECharacteristic::PROPERTY_WRITE  |
                      BLECharacteristic::PROPERTY_NOTIFY |
                      BLECharacteristic::PROPERTY_INDICATE
                    );
  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();
  pServer->getAdvertising()->start();
  Serial.println("BLE pronto para conexão");
}

float medirDistancia(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duracao = pulseIn(echoPin, HIGH, 30000);
  if (duracao == 0) return -1.0;
  float distancia = duracao * 0.034 / 2;
  return distancia;
}

void loop() {
  static int sensoresAtivados = 0;
  static int sensoresDesativados = 4; // Inicialmente todas vagas livres
  static uint8_t vagaEstadoAnterior[4] = {0, 0, 0, 0}; // Estado anterior (0 = disponível, 1 = ocupada)

  // Array para armazenar o estado atual das vagas
  uint8_t vagaEstado[4][2] = {
    {1, 0}, // Vaga 1
    {2, 0}, // Vaga 2
    {3, 0}, // Vaga 3
    {4, 0}  // Vaga 4
  };

  int ativadosAtual = 0;
  int desativadosAtual = 0;

  // Verificar vaga 1
  float distancia1 = medirDistancia(trig1, echo1);
  if (distancia1 > 0 && distancia1 < distanciaLimite) {
    digitalWrite(led1, HIGH);
    ativadosAtual++;
    vagaEstado[0][1] = 1; // Ocupada
  } else {
    digitalWrite(led1, LOW);
    desativadosAtual++;
    vagaEstado[0][1] = 0; // Disponível
  }

  // Verificar vaga 2
  float distancia2 = medirDistancia(trig2, echo2);
  if (distancia2 > 0 && distancia2 < distanciaLimite) {
    digitalWrite(led2, HIGH);
    ativadosAtual++;
    vagaEstado[1][1] = 1; // Ocupada
  } else {
    digitalWrite(led2, LOW);
    desativadosAtual++;
    vagaEstado[1][1] = 0; // Disponível
  }

  // Verificar vaga 3
  float distancia3 = medirDistancia(trig3, echo3);
  if (distancia3 > 0 && distancia3 < distanciaLimite) {
    digitalWrite(led3, HIGH);
    ativadosAtual++;
    vagaEstado[2][1] = 1; // Ocupada
  } else {
    digitalWrite(led3, LOW);
    desativadosAtual++;
    vagaEstado[2][1] = 0; // Disponível
  }

  // Verificar vaga 4
  float distancia4 = medirDistancia(trig4, echo4);
  if (distancia4 > 0 && distancia4 < distanciaLimite) {
    digitalWrite(led4, HIGH);
    ativadosAtual++;
    vagaEstado[3][1] = 1; // Ocupada
  } else {
    digitalWrite(led4, LOW);
    desativadosAtual++;
    vagaEstado[3][1] = 0; // Disponível
  }

  // Enviar dados via BLE apenas se houver mudança de estado e dispositivo conectado
  if (deviceConnected) {
    for (int i = 0; i < 4; i++) {
      if (vagaEstado[i][1] != vagaEstadoAnterior[i]) { // Detectar mudança de estado
        pCharacteristic->setValue(vagaEstado[i], 2);  // Envia 2 bytes: posição e estado
        pCharacteristic->notify();                     // Notifica o dispositivo conectado
        Serial.print("Vaga ");
        Serial.print(vagaEstado[i][0]);
        Serial.print(" mudou para ");
        Serial.println(vagaEstado[i][1] ? "Ocupada" : "Disponível");
        delay(10);                                    // Pequeno delay para evitar sobrecarga
        vagaEstadoAnterior[i] = vagaEstado[i][1];     // Atualiza estado anterior
      }
    }
  }

  // Atualizar contadores apenas se houver mudança
  if (ativadosAtual != sensoresAtivados || desativadosAtual != sensoresDesativados) {
    sensoresAtivados = ativadosAtual;
    sensoresDesativados = desativadosAtual;

    // Atualizar display LCD e Serial
    Serial.print("Total Livres: ");
    Serial.println(sensoresDesativados);
    Serial.print("Total Ocupados: ");
    Serial.println(sensoresAtivados);
    Serial.println("------------------------");

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Livres: ");
    lcd.print(sensoresDesativados);
    lcd.setCursor(0, 1);
    lcd.print("Ocupadas: ");
    lcd.print(sensoresAtivados);
  }

  delay(1000); // Reduzi o delay para maior responsividade
}
